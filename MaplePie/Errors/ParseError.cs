using MaplePie.Parser;

namespace MaplePie.Errors;


/// <summary>
/// Тип ошибки используемый стандартными комбинаторами.
/// 
/// Как правило, ошибки парсинга отдельных компонентов мало что значат без контекста,
/// но формирование контекстно значимых ошибок может быть сложным в общем виде и требует затрат
/// производительности, аллокаций.
/// 
/// По этим причинам стандартные парсеры MaplePie не формируют контекстно-зависимую ошибку в общем виде
/// (например в виде ошибки содержащей информацию о цепочке парсеров).
/// Цель перечисления ошибок ParseError лишь частично сузить причину ошибки с точностью до
/// типа парсера и места (из последней известной позиции) парсера,
/// и позволить пользователю композировать парсеры, преобразуя ошибки только тогда,
/// когда он сам введет семантически значимый тип ошибки.
///
/// ParseError это компромисс между информативностью, композируемостью по-умолчанию и затратам.
///
/// Альтернативой этому подходу может быть всегда возвращать пустой тип ошибки или указывать каждому парсеру
/// уникальное имя, позволяющее определить точку ошибки.
/// </summary>
public enum ParseError
{
    Tag,
    Take,
    Eof,
    Select,
    TokenIs,
}

public static class ParseErrorExtensions
{
    public static string Format<TToken>(this ParseError error, ReadOnlySpan<TToken> input, InputRange range)
    {
        throw new NotImplementedException();
    }
}
